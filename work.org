* Prejam / Engine Creation
  The rules state
  #+begin_quote
  General purpose code, designing, bases and models,
  placeholders, and story can be made before the start of the
  jam. Here's clarification
  #+end_quote
  (https://corgi-engine.moremountains.com/, apparently this qualifies, and this is practically a game on it's own...)

  This is general purpose enough since I just need it for any open-world metroidvania. Design
  will be done outside repo maybe?

  I'm not expecting to target the web unlike with other gamejams since most metroidvanias ought to
  be long enough that I shouldn't be able to play through them in an average browser session ya know?

  I mean I'm using SDL2 so I guess I have that choice if I want
  
** <2022-01-19 Wed>
*** DONE Sprite rendering,
    :LOGBOOK:
    CLOCK: [2022-01-19 Wed 15:05]--[2022-01-19 Wed 15:26] =>  0:21
    :END:
*** DONE Text rendering (preferably sizing!),
    :LOGBOOK:
    CLOCK: [2022-01-19 Wed 15:31]--[2022-01-19 Wed 15:55] =>  0:24
    :END:
*** DONE Input from keyboard
    :LOGBOOK:
    CLOCK: [2022-01-19 Wed 16:40]--[2022-01-19 Wed 16:53] =>  0:13
    :END:
*** DONE Input from mouse
*** DONE Basic platforming (collision, and physics),
    :LOGBOOK:
    CLOCK: [2022-01-19 Wed 17:25]--[2022-01-19 Wed 18:25] =>  1:00
    :END:
*** DONE Wobbly camera (smooth lerp, and juicing shakes),
*** DONE Come up with tomorrow's tasklist for generic engine ness
** <2022-01-20 Thu>
   Dental appointment so I'll be late, day 2, more basic stuff, just do
   most of the stuff on the list. 25 or so days?

   NOTE(jerry): appointment at 3:10 and I have to stick around until 4:20 for the
   second one? What was that I said about getting anything done?? hahaha

   Actually ya know what. I'm not doin this today.
** <2022-01-21 Fri>
*** DONE (this)Input from controller
    :LOGBOOK:
    CLOCK: [2022-01-21 Fri 17:49]--[2022-01-21 Fri 18:12] =>  0:23
    :END:
*** DONE (this)Basic sound effects
    :LOGBOOK:
    CLOCK: [2022-01-21 Fri 17:05]--[2022-01-21 Fri 17:33] =>  0:28
    :END:
    sdl mixer is passable enough. not good at audio
*** DONE (this)Subrectangle sprite rendering
    :LOGBOOK:
    CLOCK: [2022-01-21 Fri 17:37]--[2022-01-21 Fri 17:41] =>  0:04
    :END:
*** DONE (this)Tile slopes
** <2022-01-22 Sat> 
** <2022-01-23 Sun>
*** DONE Fix up the slope tile edge cases (not necessarily in this order)
    - [X] Fix what happens when approaching from the bottom.
    - [X] Fix snapping when I'm not high enough to snap into it
      I just noticed this kind of breaks if I "fall" into the left corner of the slope... So
      this is going to be a lot of fun to try and fix...
    - [X] Handle BL BR slopes
      
*** DONE Clean up slope tile code
    :LOGBOOK:
    CLOCK: [2022-01-23 Sun 16:44]--[2022-01-23 Sun 17:08] =>  0:24
    CLOCK: [2022-01-23 Sun 16:24]--[2022-01-23 Sun 16:44] =>  0:20
    :END:
*** DONE Really... Weird issue with solid tiles when it is in the first row... WTF?
    Uh. I guess I fixed the issue. Not sure why the inequality needs to be this way.
    I mean I kind of do, but not 100%. But okay.
    
*** TODO [4/6] (??) Tile world editor (pt1, really crufty bad UI without mouse, just place different tiles)
    This will eventually be expanded to a world link editor.
    I'll have to code in specific functionality per game, but this is generally
    pretty generic stuff, so should be fair game since there's no assets. I could use
    this to prototype world layout I guess...

    Obviously the tilemap format isn't final yet! So yeah.

    (this is for a basic one btw. I have a week to QOL this shit. LOL GOOD LUCK)
    
    - [X] Place some tiles
    - [X] Select different tile types
    - [X] Write to disk
    - [X] Load from disk
    - [ ] Playtest mode (might not get this one?)
    - [ ] Or something
*** TODO (reallybasicthis)particle systems that can collide and bounce
    Looks kind of cool I guess, not necessarily interactive.

    Just wanna try and simulate some fire and smoke
*** TODO (fun stuff after I get a good amount of tilemap progress) Fun particle system stuff, pixel collision, mess around!
    Just play around with this. It can be useful for making some cool special effects!
** <2022-01-24 Mon>
   90% sure if I can do most of the stuff above... I'm probably in more than acceptable
   shape for the jam. I'm probably going to just add graphics features at this point or
   bugfix, or optimize engine stuff. If I think of any actual generic metroidvania/platformer
   features I'm probably missing. This is just extends until the start of the jam.

   Or I might just continually refine the game tools for this engine/framework thingie. Then just
   like 7DRL, I "fork" the engine to make the game.

   I will find it horribly ironic if this goes just as bad as 7DRL since I made the godot framework
   for that a week in advance, and I still fucked up in the game making process LOL. But this is a month
   and not a week.
   
   Need to handle some quick business, and will be late coming home so don't expect most of this.
*** TODO Slopes! When I walk into an obstacle!
    This isn't really that difficult to fix. Just kind of annoying.
*** TODO (ingame console)
    I'm not coding this from scratch, I'm literally just going to copy and paste the ingame-console from
    bim simply cause it works fine already.

    It's not a scripting language or anything which kinda sucks, it's just a basic quake style console.
    It works pretty well imo, and is easy to integrate so... free 1.2k lines to the source code lol

    Probably only going to use this for basic cheats, and level loading, game state setting, and testing
    things like seeing the ending or whatever.
    
*** TODO (animated sprite system) or something?
*** TODO Load different levels/tilemaps/chunks/whatever
*** TODO Moveable tilemap "islands" / platforms
    Editor support for these... Is going to be a bitch probably.

    I guess the way this fits into the collision system without proper physics...
    Will also be a bitch!

    It... May be better to just make everything work into a separate "physics" world,
    and just let the physics work itself out automatically...

    But the code for what I currently have isn't so ridiculous. (slopes are the only complicated
    part honestly...)
    
*** TODO Try to build on ubuntu or something
    someone teach me how to distribute on linux, I'll provide source anyways but
    senpai pls.
*** TODO Rope like objects 
    Basic rope swinging should be fine.
*** TODO Basic debug gui stuff
*** TODO Background tiles or something
*** TODO (?)Consider thinking of the entity system
*** TODO (?)Start OpenGL renderer as the last thing I guess.
*** TODO Cleanup and refactor the code at the end of the week.
*** TODO Basic Menu Game State system, and a normal game state system
    Main Menu, Loading a save file, Credits, Options, and Quit.

    This is just going to exist to have ANY menu... Game pause is also
    a thing here.

    Also I guess a basic idea of dying is okay.
    
*** TODO Resolution independent rendering.
*** TODO cpu "decal" system
    I don't know enough about gpu magic to do this with opengl, but calculating some random
    numbers, this will only use like 8 mbs on a moderately sized level. I assume it'll run fast
    enough (considering apparently a -O2 naive software renderer runs at lightspeed on this computer,
    I'm sure blitting on a smaller tilemap, and not even the whole thing would be pancakes easy...)

    I kinda want to do this cause it would look cool for generic violent effects or liquid splatter or
    something.

    Probably will perform not so great but I think the frame budget is really generous...

    Also since this only runs on the CPU, this doesn't require me to write an opengl renderer. Quite yet anyways.
*** TODO Simple radial lighting
    I could use a "light texture", but I want to do more generic tile lighting.

    I'm considering just using BFS bounded by a distance formula, and calling that a day.
    Pretty sure that'll look okay enough for what I need.
** <2022-01-25 Tue>
   I have a meeting today.
* Jam Time <2022-02-15 Tue>
  When the jam starts put tasks here. This is game-specific stuff,
  hopefully by this time I have a plan for the game plot and obviously
  the engine should be ready by this time (or good enough...)

  Hopefully the 
